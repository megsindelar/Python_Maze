from asyncio import start_server
import numpy as np
import random

#set the size of the playable matrix
rows = 4
columns = 4

#create a matrix of the specified size then fill with -1's
maze = np.zeros((rows, columns))
maze.fill(-1)

#pick a start point denoted by 2
startc = random.randint(0,columns-1)
maze[0,startc] = 2

#add padding around the maze :)
maze = np.pad(maze, pad_width=1, mode='constant', constant_values=-2)
print(maze)

#generate maze path
#identify walls cells
walls = []

for indexr, row in enumerate(maze): 
    for indexc, num in enumerate(row):
        if num == 2 or num == 0:
            B = [indexr, indexc]
            north = [indexr+1, indexc]
            south = [indexr-1, indexc]
            east = [indexr, indexc+1]
            west = [indexr, indexc-1]
            print(north)
            directions = [north, south, east, west]
            neighbors = [maze[north[0],north[1]], maze[south[0], south[1]], maze[east[0], east[1]], maze[west[0], west[1]]]
            print(neighbors)
            for x, dir in enumerate(neighbors):
                if dir == -1 and x == 0:
                    walls.append(north)
                if dir == -1 and x == 1:
                    walls.append(south)
                if dir == -1 and x == 2:
                    walls.append(east)
                if dir == -1 and x == 3:
                    walls.append(west)
                print(walls)



#             if maze[indexr+1, indexc] == -1:

#             if maze[indexr-1, indexc] == -1:
                
#                 for i in range(len(north)):
#                     walls.insert(i, north[i])
#                     print(walls)
#             if maze[indexr+1, indexc+1] == -1:
                
#                 for i in range(len(north)):
#                     walls.insert(i, north[i])
#                     print(walls)
#             if maze[indexr+1, indexc-1] == -1:
                
#                 for i in range(len(north)):
#                     walls.insert(i, north[i])
#                     print(walls)

            #if maze[indexr+2, indexc] == -1:
                #B = [indexr+2, indexc]
                #print(maze[B])
                #rontier = frontier.append(place)
                #rint(frontier)


            

#remove poser frontier cells


#ramdonly pick a frontier cell


#make chosen cell into a passage and 
#connect new passage with old passage





#pick an end point denoted by 3
#endc = random.randint(0,columns)