from turtle import fd
import numpy as np
import random

#set the size of the playable matrix
rows = 4
columns = 4

#create a matrix of the specified size then fill with -1's
maze = np.zeros((rows, columns))
maze.fill(-1)

#pick a start point denoted by 2
#startc = random.randint(0,columns-1)
#maze[0,startc] = 2

#add padding around the maze :)
maze = np.pad(maze, pad_width=1, mode='constant', constant_values=-2)
print(maze)

walls = []

#put all legal indexes into walls
for indexr, row in enumerate(maze): 
        for indexc, num in enumerate(row):
            if maze[indexr, indexc] != -2:
                wall = [indexr, indexc]
                walls.append(wall)


while len(walls) > 0:
    #pick B from random index in walls and set to 0
    B = random.randint(0,len(walls)-1)
    setB = walls[B]
    print(setB[0])
    maze[setB[0], setB[1]] = 0
    print(maze)

    #check the nextdoor neighbors (ndn) and 
    #the next nextdoor neighbots (nndn) to see if they are 1's
    north = [setB[0]-1, setB[1]]
    south = [setB[0]+1, setB[1]]
    east = [setB[0], setB[1]+1]
    west = [setB[0], setB[1]-1]
    ndn = [maze[north[0],north[1]], maze[south[0], south[1]],
           maze[east[0], east[1]], maze[west[0], west[1]]]
    directions = [north, south, east, west]

    fnorth = []
    fsouth = []
    feast = []
    fwest = []
    
    walls.clear()
    fdirections = ''

    for x, dir in enumerate(ndn):
        print(x)
        print(dir)
        #add all of the surround cells to walls
        if dir == -1 and x == 0:
            walls.append(north)
            fdirections += ' fnorth'
            print('hi')
                    
        if dir == -1 and x == 1:
            walls.append(south)
            fdirections += ' fsouth'
            print('hey')


        if dir == -1 and x == 2:
            walls.append(east)
            fdirections += ' feast'
            print('yo')

        if dir == -1 and x == 3:
            walls.append(west)
            fdirections += ' fwest'
            print('sup')
    print(fdirections)

    if 'fnorth' in fdirections:
        fnorth = [setB[0]-2, setB[1]]
        frows = fnorth[0] 
        fcols = fnorth[1]
        if maze[frows, fcols] == -1:
            walls.append(north)

    if 'fsouth' in fdirections:
        fsouth = [setB[0]+2, setB[1]]
        frows = fsouth[0] 
        fcols = fsouth[1]
        if maze[frows, fcols] == -1:
            walls.append(north) 

    if 'feast' in fdirections:
        frows = feast[0] 
        fcols = feast[1]
        feast = [setB[0], setB[1]+2]
        if maze[frows, fcols] == -1:
            walls.append(north)

    if 'fwest' in fdirections:
        fwest = [setB[0], setB[1]-2]
        frows = fwest[0] 
        fcols = fwest[1]
        if maze[frows, fcols] == -1:
            walls.append(north)

    print(walls)

    break